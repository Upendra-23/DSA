class Solution {
    vector<int> getPse(vector<int> &heights, int n){
        vector<int> pse(n, -1);
        stack<int> s;
        for(int i=0;i<n;i++){
            while(!s.empty() && heights[s.top()] >= heights[i]){
                s.pop();
            }
            if(!s.empty()) pse[i] = s.top();
            s.push(i);
        }
        return pse;
    }
    vector<int> getNse(vector<int> &heights,int n){
        vector<int> nse(n, n);
        stack<int> s;
        for(int i=n-1;i>=0;i--){
            while(!s.empty() && heights[s.top()] >= heights[i]){
                s.pop();
            }
            if(!s.empty()) nse[i] = s.top();
            s.push(i);
        }
        return nse;
    }
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size(), ans = 0;
        stack<int> s;
        for(int i=0;i<n;i++){
            while(!s.empty() && heights[s.top()] >= heights[i]){
                int currInd = s.top();
                s.pop();
                int sind = s.empty() ? -1 : s.top();
                ans = max(ans, heights[currInd] * (i - sind - 1));
            }
            s.push(i);
        }
        while(!s.empty()){
            int currInd = s.top();
            s.pop();
            int sind = s.empty() ? -1 : s.top();
            ans = max(ans, heights[currInd] * (n - sind - 1));
        }
        return ans;
    }
};
