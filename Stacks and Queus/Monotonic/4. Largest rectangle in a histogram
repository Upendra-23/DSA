 // 2 pass solution
 int largestRectangle(vector < int > & heights) {
     stack<int> s;
     int n = heights.size();
     vector<int> rightSmall(n), leftSmall(n);
     for(int i=0;i<n;i++){
         while(!s.empty() && heights[i] <= heights[s.top()])
            s.pop();
         if(s.empty()) leftSmall[i] = 0;
         else leftSmall[i] = s.top()+1;
         s.push(i);
     }
     
     while(!s.empty()) s.pop();

     for (int i = n - 1; i >= 0; i--) {
       while (!s.empty() && heights[i] <= heights[s.top()])
         s.pop();
       if (s.empty()) rightSmall[i] = n - 1;
       else rightSmall[i] = s.top() - 1;
       s.push(i);
     }
     
     int ans = 0;
     for(int i=0;i<n;i++)
        ans = max(ans,(rightSmall[i]-leftSmall[i]+1) * heights[i]);
    return ans;  
 }

  // One Pass Solution
  int largestRectangle(vector < int > & heights) {
     int n = heights.size();
     stack<int> s;
     int ans = 0;
     for(int i=0;i<=n;i++){
         while(!s.empty() && (i == n || heights[i] <= heights[s.top()])){
             int h = heights[s.top()];
             s.pop();
             int width;
             if(s.empty()) width = i;
             else width = i-s.top()-1;
             ans = max(ans,width*h); 
         }
         s.push(i);
     }
     return ans;
 }
