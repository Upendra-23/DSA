class MedianFinder {
    priority_queue<int> maxHeap;
    priority_queue<int,vector<int>,greater<int>> minHeap;
public:
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(maxHeap.size() == 0 || num < maxHeap.top())
            maxHeap.push(num);
        else 
            minHeap.push(num);

        if(maxHeap.size()-1 > minHeap.size()){
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        }
        else if(maxHeap.size() < minHeap.size()){
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
    }
    
    double findMedian() {
        if(maxHeap.size() == minHeap.size()){
            double val1 = maxHeap.top();
            double val2 = minHeap.top();
            return (val1+val2)/2;
        }
        return maxHeap.top();
    }
};
