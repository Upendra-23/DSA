class MedianFinder {
    priority_queue<int> maxHeap;
    priority_queue<int,vector<int>,greater<int>> minHeap;
    int cnt;
public:
    MedianFinder() {
        cnt = 0;
    }
    
    void addNum(int num) {
        if(cnt == 0 || maxHeap.top() >= num) maxHeap.push(num);
        else minHeap.push(num);

        if(minHeap.size() > maxHeap.size()){
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
        else if(maxHeap.size() - minHeap.size() == 2){
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        }
        cnt++;
    }
    
    double findMedian() {
        if(cnt & 1) return maxHeap.top() * 1.0;
        return (minHeap.top() + maxHeap.top())*1.0/2.0;
    }
};
