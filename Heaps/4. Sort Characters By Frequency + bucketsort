class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char,int> mp;
        for(auto ch:s) mp[ch]++;

        priority_queue<pair<int,char>> pq;
        for(auto it:mp) pq.push({it.second,it.first});

        string ans = "";
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            char ch = it.second;
            while(it.first--)
                ans += ch;
        }
        return ans;
    }
};


class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char,int> mp;
        for(auto it:s) mp[it]++;

        vector<vector<char>> buckets(s.size()+1);
        for(auto [ch, freq]: mp) buckets[freq].push_back(ch);

        string ans = "";
        for(int freq=s.size();freq>=1;freq--){
            for(auto ch: buckets[freq])
                ans.append(freq, ch);
        }
        return ans;
    }
};
