class Solution {
    int getSum(int i,int j,vector<vector<int>> &pf){
        int n = pf.size(), m = pf[0].size();
        if(i < 0 || j < 0) return 0;
        if(i >= n) i = n-1;
        if(j >= m) j = m-1;
        return pf[i][j];
    }
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        int n = mat.size();
        int m = mat[0].size();

        vector<vector<int>> pf(n,vector<int> (m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++)
                pf[i][j] = mat[i][j] + getSum(i-1,j, pf) + getSum(i,j-1, pf) - getSum(i-1,j-1,pf);
        }

        vector<vector<int>> ans(n,vector<int> (m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                ans[i][j] = getSum(i+k,j+k,pf) - getSum(i-k-1,j+k, pf) - getSum(i+k, j-k-1, pf) + getSum(i-k-1,j-k-1, pf);
            }
        }
        return ans;
    }
};
