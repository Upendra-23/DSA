class Solution {
    bool fun(vector<int> &piles,int mid,int h){
        int n = piles.size();
        long long cnt = 0;
        for(int i=0;i<n;i++){
            cnt += piles[i]/mid;
            if(piles[i] % mid != 0)
                cnt++;
        }
        return cnt <= h;
    }
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int n = piles.size();
        int low = 1;
        int high = *max_element(piles.begin(),piles.end());
        int ans = 0;
        while(low <= high){
            int mid = low+(high-low)/2;
            if(fun(piles,mid,h)){
                ans = mid;
                high = mid-1;
            }
            else low = mid+1;
        }
        return ans;
    }
};
