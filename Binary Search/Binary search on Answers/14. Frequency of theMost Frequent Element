class Solution {
    int bs(vector<int> &nums, vector<long long> &prefixSum, int i, int k){
        long long ans = -1, target = nums[i];
        int low = 0, high = i;
        while(low <= high){
            int mid = low+(high-low)/2;
            int len = i-mid+1;
            long long leftSum = prefixSum[i] - ((mid-1>=0) ? prefixSum[mid-1] : 0);
            long long actualSum = target * len;
            long long requiredOperations = actualSum - leftSum;
            if(requiredOperations <= k){
                ans = len;
                high = mid-1;
            }
            else low = mid+1;
        }
        return ans;
    }
public:
    int maxFrequency(vector<int>& nums, int k) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<long long> prefixSum(n, 0);
        long long cuSum = 0;
        for(int i=0;i<n;i++){
            cuSum += nums[i];
            prefixSum[i] = cuSum;
        }

        int ans = -1;
        for(int i=n-1;i>=0;i--){
            ans = max(ans, bs(nums, prefixSum, i, k));
        }
        return ans;
    }
};
