class Graph {
    int dijkstra(int src,int dst,int n,unordered_map<int,vector<pair<int,int>>> &adj){
        vector<int> dist(n,1e9);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,src});
        dist[src] = 0;

        while(!pq.empty()){
            int currDis = pq.top().first;
            int node = pq.top().second;
            pq.pop();

            if(currDis > dist[node]) continue;

            for(auto [adjnode, edgewt]: adj[node]){
                if(currDis + edgewt < dist[adjnode]){
                    dist[adjnode] = currDis + edgewt;
                    pq.push({dist[adjnode], adjnode});
                }
            }
        }
        if(dist[dst] == 1e9) return -1;
        return dist[dst];
    }
public:
    unordered_map<int,vector<pair<int,int>>> adj;
    int N;
    Graph(int n, vector<vector<int>>& edges) {
        N = n;
        for(auto it:edges)
            adj[it[0]].push_back({it[1],it[2]});
    }
    
    void addEdge(vector<int> edge) {
        adj[edge[0]].push_back({edge[1],edge[2]});
    }
    
    int shortestPath(int node1, int node2) {    
        return dijkstra(node1,node2,N,adj);
    }
};

/**
 * Your Graph object will be instantiated and called as such:
 * Graph* obj = new Graph(n, edges);
 * obj->addEdge(edge);
 * int param_2 = obj->shortestPath(node1,node2);
 */
