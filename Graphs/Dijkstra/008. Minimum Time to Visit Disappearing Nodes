class Solution {
public:
    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {
        unordered_map<int,vector<pair<int,int>>> adj;
        for(auto it:edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }

        vector<int> dist(n,1e9);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,0});
        dist[0] = 0;

        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();

            int dis = it.first;
            int node = it.second;

            // The reason is that standard Djikstra's Algorithm might visit a node which has already been processed.
            // In the Input: n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,1,5].
            // We can see that the node 2 is visited twice even though it should ideally be visited once.
            // If you find a higher length first, then a smaller length, you will still visit the higher length.
            // We can avoid this by processing a node only if we know there is a smaller length than the current one else we skip it.
            // The condition will be

            if(dis > dist[node]) continue;

            for(auto it:adj[node]){
                int adjnode = it.first;
                int edgewt = it.second;
                if(dis + edgewt < disappear[adjnode] && dis + edgewt < dist[adjnode]){
                    dist[adjnode] = dis + edgewt;
                    pq.push({dist[adjnode], adjnode});
                }

            }
        }
        for(int i=0;i<n;i++){
            if(dist[i] == 1e9)
                dist[i] = -1;
        }
        return dist;
    }
};
