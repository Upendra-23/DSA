class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // create a graph
        unordered_map<int,vector<pair<int,int>>> adj;
        for(auto it:edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        
        vector<int> dist(n+1,1e9), parent(n+1,0);
        for(int i=0;i<=n;i++){
            parent[i] = i;
        }
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,
        greater<pair<int,int>>> pq;
        pq.push({0,1});
        dist[1] = 0;
        
        while(!pq.empty()){
            int dis = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            
            for(auto it:adj[node]){
                int adjnode = it.first;
                int edgewt = it.second;
                if(dis + edgewt < dist[adjnode]){
                    dist[adjnode] = dis + edgewt;
                    parent[adjnode] = node;
                    pq.push({dist[adjnode],adjnode});
                }
            }
        }
        
        if(dist[n] >= 1e9) return {-1};
        
        vector<int> ans;
        int node = n;
        while(parent[node] != node){
            ans.push_back(node);
            node = parent[node];
        }
        ans.push_back(node);
        
        reverse(ans.begin(),ans.end());
        return ans;
    
    }
};
