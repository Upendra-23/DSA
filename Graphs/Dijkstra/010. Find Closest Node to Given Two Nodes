class Solution {
    vector<int> bfs(int src,int n,unordered_map<int,vector<int>> &adj){
        queue<pair<int,int>> q;
        vector<int> dist(n, 1e9);
        q.push({0,src});
        dist[src] = 0;

        while(!q.empty()){
            int currDis = q.front().first;
            int node = q.front().second;
            q.pop();

            for(auto adjnode:adj[node]){
                if(currDis + 1 < dist[adjnode]){
                    dist[adjnode] = currDis + 1;
                    q.push({dist[adjnode], adjnode});
                }
            }
        }
        return dist;
    }
public:
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size();
        unordered_map<int,vector<int>> adj;
        for(int i=0;i<n;i++){
            if(edges[i] != -1)
                adj[i].push_back(edges[i]);
        }

        vector<int> vec1 = bfs(node1, n, adj);
        vector<int> vec2 = bfs(node2, n, adj);
        int ans = 1e9, ind = -1;
        for(int i=0;i<n;i++){
            if(vec1[i] != 1e9 && vec2[i] != 1e9){
                if(max(vec1[i],vec2[i]) < ans){
                    ans = max(vec1[i],vec2[i]);
                    ind = i;
                }
            }
        }
        return ind;
    }
};
