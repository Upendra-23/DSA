class Solution {
    void dijkstra(int src, vector<int> &dist, unordered_map<int,vector<pair<int,int>>> &adj){
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,src});
        dist[src] = 0;

        while(!pq.empty()){
            int dis = pq.top().first;
            int node = pq.top().second;
            pq.pop();

            for(auto it:adj[node]){
                int adjnode = it.first;
                int edgewt = it.second;
                if(dis + edgewt < dist[adjnode]){
                    dist[adjnode] = dis + edgewt;
                    pq.push({dist[adjnode], adjnode});
                }
            }
        }
    }
public:
    vector<bool> findAnswer(int n, vector<vector<int>>& edges) {
        unordered_map<int,vector<pair<int,int>>> adj;
        for(auto it:edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }

        vector<int> distFromSrc(n,1e9), distFromDst(n,1e9);

        dijkstra(0,distFromSrc,adj);
        dijkstra(n-1,distFromDst,adj);

        int d = distFromSrc[n-1];
        vector<bool> ans;
        for(auto it:edges){
            int a = it[0], b = it[1], w = it[2];
            if((distFromSrc[a]+w+distFromDst[b] == d) || (distFromSrc[b]+w+distFromDst[a] == d)) ans.push_back(true);
            else ans.push_back(false);
        }
        return ans;
    }
};
