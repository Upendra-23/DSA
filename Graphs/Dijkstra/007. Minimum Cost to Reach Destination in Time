class Solution {
public:
    int minCost(int maxTime, vector<vector<int>>& edges, vector<int>& passingFees) {
        int n = passingFees.size();
        unordered_map<int,vector<pair<int,int>>> adj;
        for(auto it:edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }

        vector<int> dist(n,1e9), cost(n,1e9);
        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>> pq;
        pq.push({passingFees[0], 0, 0});
        dist[0] = 0;
        cost[0] = passingFees[0];

        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();

            int currCost = it[0];
            int currDis = it[1];
            int node = it[2];

            for(auto it:adj[node]){
                int adjnode = it.first;
                int edgewt = it.second;
                if(currDis + edgewt > maxTime) continue;
                if(currCost + passingFees[adjnode] < cost[adjnode]){
                    cost[adjnode] = currCost + passingFees[adjnode];
                    dist[adjnode] = currDis + edgewt;
                    pq.push({cost[adjnode], dist[adjnode], adjnode});
                }
                else if(currDis + edgewt < dist[adjnode]){
                    dist[adjnode] = currDis + edgewt;
                    pq.push({currCost + passingFees[adjnode], dist[adjnode], adjnode});
                }
            }
        }
        if(cost[n-1] == 1e9) return -1;
        return cost[n-1];
    }
};
