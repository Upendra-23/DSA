class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        unordered_map<int,vector<pair<int,double>>> adj;
        vector<double> dist(n,0);

        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0],succProb[i]});   
        }

        priority_queue<pair<double,int>> pq;
        pq.push({1,start_node});
        dist[start_node] = 1;

        while(!pq.empty()){
            double prob = pq.top().first;
            int node = pq.top().second;
            pq.pop();

            if(node == end_node) return prob;

            for(auto it:adj[node]){
                int adjnode = it.first;
                double edgewt = it.second;
                if(prob * edgewt > dist[adjnode]){
                    dist[adjnode] = prob * edgewt;
                    pq.push({dist[adjnode], adjnode});
                }
            }
        }
        return 0.0;
    }
};
