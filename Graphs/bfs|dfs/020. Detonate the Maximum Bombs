class Solution {
    int bfs(int node, unordered_map<int,vector<int>> &adj,int n){
        unordered_set<int> vis;
        queue<int> q;
        q.push(node);
        vis.insert(node);

        while(!q.empty()){
            int node = q.front();
            q.pop();

            for(auto it:adj[node]){
                if(vis.find(it) == vis.end()){
                    vis.insert(it);
                    q.push(it);
                }
            }
        }
        return vis.size();
    }
public:
    int maximumDetonation(vector<vector<int>>& bombs) {
        int n = bombs.size();
        unordered_map<int,vector<int>> adj;

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i == j) continue;
                long long x1 = bombs[i][0], y1 = bombs[i][1], r1 = bombs[i][2];
                long long x2 = bombs[j][0], y2 = bombs[j][1], r2 = bombs[j][2];
                long long d = pow(y2-y1,2) + pow(x2-x1,2);
                if(r1*r1 >= d) adj[i].push_back(j);
            }
        }

        int ans = 0;
        for(int i=0;i<n;i++){
            ans = max(ans, bfs(i,adj,n));
        }
        return ans;
    }
};
