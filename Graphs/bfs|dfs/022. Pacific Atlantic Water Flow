class Solution {
    bool isvalid(int row,int col,int n,int m){
        return row >= 0 && row < n && col >= 0 && col < m;
    }
    void dfs(int row,int col,vector<vector<int>> &vis, vector<vector<int>>& heights){
        vis[row][col] = true;
        
        int dr[] = {-1,0,0,1};
        int dc[] = {0,-1,1,0};

        for(int i=0;i<4;i++){
            int nrow = row + dr[i];
            int ncol = col + dc[i];
            if(isvalid(nrow,ncol,heights.size(),heights[0].size()) && heights[nrow][ncol] >= heights[row][col] && !vis[nrow][ncol]){
                dfs(nrow,ncol,vis,heights);
            }
        }
    }
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int n = heights.size();
        int m = heights[0].size();

        vector<vector<int>> pacificVis(n, vector<int> (m,0)), atlanticVis(n, vector<int> (m,0));
        
        for(int j=0;j<m;j++){
            if(!pacificVis[0][j]) dfs(0,j,pacificVis,heights);
             if(!atlanticVis[n-1][j]) dfs(n-1,j,atlanticVis,heights);
        }

        for(int i=0;i<n;i++){
            if(!pacificVis[i][0]) dfs(i,0,pacificVis,heights);
            if(!atlanticVis[i][m-1]) dfs(i,m-1,atlanticVis,heights);
        }

        vector<vector<int>> ans;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(atlanticVis[i][j] == 1 && pacificVis[i][j] == 1)
                    ans.push_back({i,j});
            }
        }
        return ans;
    }
};
