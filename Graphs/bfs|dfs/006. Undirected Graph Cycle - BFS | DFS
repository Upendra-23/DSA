// https://www.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

class Solution {
    
    bool bfs(int node, vector<int> &vis, vector<vector<int>> &adj){
        vis[node] = true;
        queue<pair<int,int>> q;
        q.push({node, -1} );
        
        while(!q.empty()){
            int node = q.front().first;
            int par = q.front().second;
            q.pop();
            
            for(auto it:adj[node]){
                if(!vis[it]){
                    vis[it] = true;
                    q.push({it, node});
                }
                else if(it != par)
                    return true;
            }
        }
        return false;
    }
    
    
    bool dfs(int node,int par, vector<int> &vis, vector<vector<int>> &adj){
        vis[node] = true;
        for(auto it:adj[node]){
            if(!vis[it]){
                if(dfs(it,node,vis,adj))
                    return true;
            }
            else if(it != par)
                return true;
        }
        return false;
    }
    
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(vector<vector<int>>& adj) {
        int n = adj.size();
        
        vector<int> vis(n,0);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                if(dfs(i, -1, vis, adj))
                    return true;
            }
        }
        return false;
    }
};
