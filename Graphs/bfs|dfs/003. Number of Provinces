// problem link: https://leetcode.com/problems/number-of-provinces/

class Solution {
    void bfs(int node,vector<int> &vis,vector<vector<int>> &adj){
        queue<int> q;
        q.push(node);
        vis[node] = true;

        while(!q.empty()){
            node = q.front();
            q.pop();

            for(auto it:adj[node]){
                if(!vis[it]){
                    vis[it] = true;
                    q.push(it);
                }
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();

        vector<vector<int>> adj(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }

        int nc = 0;
        vector<int> vis(n,0);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                nc++;
                bfs(i, vis, adj);
            }
        }
    
        return nc;
    }
};
