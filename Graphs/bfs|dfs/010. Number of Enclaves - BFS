// https://leetcode.com/problems/number-of-enclaves/

class Solution {
    bool isvalid(int row,int col,int n,int m){
        return row >= 0 && row < n && col >= 0 && col < m;
    }
    void dfs(int row,int col,vector<vector<int>> &vis,vector<vector<int>> &grid){
        vis[row][col] = true;
        int dr[] = {-1,0,0,1};
        int dc[] = {0,-1,1,0};

        for(int i=0;i<4;i++){
            int nrow = row + dr[i];
            int ncol = col + dc[i];
            if(isvalid(nrow,ncol,grid.size(),grid[0].size()) && grid[nrow][ncol] == 1 && !vis[nrow][ncol])
                dfs(nrow,ncol,vis,grid);
        }
    }
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<int>> vis(n,vector<int> (m,0));
        
        for(int j=0;j<m;j++){
            if(grid[0][j] == 1 && !vis[0][j]) dfs(0,j,vis,grid);
            if(grid[n-1][j] == 1 && !vis[n-1][j]) dfs(n-1,j,vis,grid);
        }

         for(int i=0;i<n;i++){
            if(grid[i][0] == 1 && !vis[i][0]) dfs(i,0,vis,grid);
            if(grid[i][m-1] == 1 && !vis[i][m-1]) dfs(i,m-1,vis,grid);
        }

        int cnt = 0;
        for(int i=1;i<n-1;i++){
            for(int j=1;j<m-1;j++){
                if(grid[i][j] == 1 && !vis[i][j])
                    cnt++;
            }
        }
        return cnt;
    }
};
