https://leetcode.com/problems/map-of-highest-peak/description/

class Solution {
    bool isvalid(int row,int col,int n,int m){
        return row >= 0 && row < n && col >= 0 && col < m;
    }
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int n = isWater.size();
        int m = isWater[0].size();

        vector<vector<int>> vis(n, vector<int> (m,0));
        queue<pair<int,int>> q;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(isWater[i][j] == 1){
                    isWater[i][j] = 0;
                    vis[i][j] = true;
                    q.push({i,j});
                }
            }
        }

        int dr[] = {-1,0,0,1};
        int dc[] = {0,-1,1,0};

        int level = 0;
        while(!q.empty()){
            level++;
            int size = q.size();
            while(size--){
                int row = q.front().first;
                int col = q.front().second;
                q.pop();

                for(int i=0;i<4;i++){
                    int nrow = row + dr[i];
                    int ncol = col + dc[i];
                    if(isvalid(nrow,ncol,n,m) && !vis[nrow][ncol]){
                        vis[nrow][ncol] = true;
                        isWater[nrow][ncol] = level;
                        q.push({nrow,ncol});
                    }
                }
            }
        }
        return isWater;
    }
};
