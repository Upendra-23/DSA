class DisjointSet {
     public:
     vector<int> parent, size;
     DisjointSet(int n){
         parent.resize(n+1,0);
         size.resize(n+1,1);
         for(int i=0;i<=n;i++){
             parent[i] = i;
         }
     }
     
     int findUpar(int node){
         if(parent[node] == node) return node;
         return parent[node] = findUpar(parent[node]);
     }
     
     void unionBySize(int u,int v){
         int ulp_u = findUpar(u);
         int ulp_v = findUpar(v);
         if(ulp_u == ulp_v) return;
         if(size[ulp_u] >= size[ulp_v]){
             parent[ulp_v] = ulp_u;
             size[ulp_u] += size[ulp_v];
         }
         else{
             parent[ulp_u] = ulp_v;
             size[ulp_v] += size[ulp_u];
         }
     }
 };
class Solution {
    bool isSame(string s1, string s2){
        if(s1 == s2) return true;
        int n = s1.size(), m = s2.size();
        if(n != m) return false;
        vector<int> indices;
        for(int i=0;i<n;i++){
            if(s1[i] != s2[i]){
                indices.push_back(i);
            }
        }
        if(indices.size() > 2 || indices.size() == 1) return false;
        swap(s2[indices[0]], s2[indices[1]]);
        return s1 == s2;
    }
public:
    int numSimilarGroups(vector<string>& strs) {
        int n = strs.size();
        DisjointSet ds(n);
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(isSame(strs[i],strs[j])){
                    ds.unionBySize(i,j);
                }
            }
        }

        int nc = 0;
        for(int i=0;i<n;i++){
            if(ds.parent[i] == i)
                nc++;
        }
        return nc;
    }
};
