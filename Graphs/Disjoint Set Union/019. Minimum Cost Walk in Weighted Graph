class DisjointSet {
    public:
    vector<int> parent, size, cost;
    DisjointSet(int n){
        parent.resize(n+1,0);
        size.resize(n+1,1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
        }
    }
    
    int findUpar(int node){
        if(parent[node] == node) return node;
        return parent[node] = findUpar(parent[node]);
    }
    
    void unionBySize(int u,int v,int w){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] >= size[ulp_v]){
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
        else{
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
    }
};
class Solution {
public:
    vector<int> minimumCost(int n, vector<vector<int>>& edges, vector<vector<int>>& query) {
        DisjointSet ds(n);

        for(auto it:edges){
            int u = it[0], v = it[1], w = it[2];
            ds.unionBySize(u,v,w);
        }

      unordered_map<int,int> mp;
      for(auto it:edges){
        int u = it[0], v = it[1], w = it[2];
        int par = ds.findUpar(u);
        if(mp.find(par) == mp.end()) mp[par] = w;
        else mp[par] &= w;
      }

      vector<int> ans;
      for(auto it:query){
        int u = it[0], v = it[1];
        if(ds.findUpar(u) == ds.findUpar(v)) ans.push_back(mp[ds.findUpar(u)]);
        else ans.push_back(-1);
      }
      return ans;
    }
};
