#include <bits/stdc++.h> 
class DisjointSet {
     public:
     vector<int> parent, size;
     DisjointSet(int n){
         parent.resize(n+1,0);
         size.resize(n+1,1);
         for(int i=0;i<=n;i++){
             parent[i] = i;
         }
     }
     
     int findUpar(int node){
         if(parent[node] == node) return node;
         return parent[node] = findUpar(parent[node]);
     }
     
     void unionBySize(int u,int v){
         int ulp_u = findUpar(u);
         int ulp_v = findUpar(v);
         if(ulp_u == ulp_v) return;
         if(size[ulp_u] >= size[ulp_v]){
             parent[ulp_v] = ulp_u;
             size[ulp_u] += size[ulp_v];
         }
         else{
             parent[ulp_u] = ulp_v;
             size[ulp_v] += size[ulp_u];
         }
     }
 };

bool static comp(vector<int> &connection1, vector<int> &connection2){
	return connection1[2] < connection2[2];
}

int getMinimumCost(int n, int m, vector<vector<int>> &connections)
{
	DisjointSet ds(n);
	sort(connections.begin(),connections.end(),comp);
	int cost = 0;
	for(auto &it: connections){
        int u = it[0], v = it[1], w = it[2];
		if(ds.findUpar(u) != ds.findUpar(v)){
			ds.unionBySize(u,v);
			cost += w;
		}
	}

	int nc = 0;
	for(int i=1;i<=n;i++){
		if(ds.parent[i] == i)
			nc++;
	}

	if(nc == 1) return cost;
	return -1;

}
