#include<bits/stdc++.h>
class DisjointSet {
    public:
    vector<int> parent, size;
    DisjointSet(int n){
        parent.resize(n+1,0);
        size.resize(n+1,1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
        }
    }
    
    int findUpar(int node){
        if(parent[node] == node) return node;
        return parent[node] = findUpar(parent[node]);
    }
    
    void unionBySize(int u,int v){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] >= size[ulp_v]){
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
        else{
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
    }
};

bool static comp(vector<int> &v1,vector<int> &v2){
	return v1[2] < v2[2];
}

int supplyWater(int n, int k, vector<int> &wells, vector<vector<int>> &pipes) {
  	DisjointSet ds(n);
  
    for(int i=0;i<n;i++){
        pipes.push_back({0,i+1,wells[i]});
    }

	sort(pipes.begin(),pipes.end(),comp);

	int cost = 0;
	for(auto it:pipes){
		int u = it[0], v = it[1], w = it[2];
		if(ds.findUpar(u) != ds.findUpar(v)){
            ds.unionBySize(u,v);
            cost += w;
		}
	}

	return cost;
}
