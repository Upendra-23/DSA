class DisjointSet {
     public:
     vector<int> parent, size;
     DisjointSet(int n){
         parent.resize(n+1,0);
         size.resize(n+1,1);
         for(int i=0;i<=n;i++){
             parent[i] = i;
         }
     }
     
     int findUpar(int node){
         if(parent[node] == node) return node;
         return parent[node] = findUpar(parent[node]);
     }
     
     void unionBySize(int u,int v){
         int ulp_u = findUpar(u);
         int ulp_v = findUpar(v);
         if(ulp_u == ulp_v) return;
         if(size[ulp_u] >= size[ulp_v]){
             parent[ulp_v] = ulp_u;
             size[ulp_u] += size[ulp_v];
         }
         else{
             parent[ulp_u] = ulp_v;
             size[ulp_v] += size[ulp_u];
         }
     }
 };
class Solution {
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {

        DisjointSet ds(n);
        vector<int> indegree(n,0);
        for(int i=0;i<n;i++){
            int left = leftChild[i];
            int right = rightChild[i];
            if(left != -1){
                indegree[left]++;
                if(indegree[left] ==1 && ds.findUpar(i) != ds.findUpar(left)) ds.unionBySize(i,left);
                else return false;
            }
            if(right != -1){
                indegree[right]++;
                if(indegree[right] == 1 && ds.findUpar(i) != ds.findUpar(right)) ds.unionBySize(i,right);
                else return false;
            }
        }

        int nc = 0;
        for(int i=0;i<n;i++){
            if(ds.parent[i] == i)
                nc++;
        }

        return nc == 1;
    }
};
