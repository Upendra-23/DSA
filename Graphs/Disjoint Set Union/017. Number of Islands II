class DisjointSet {
    public:
    vector<int> parent, size;
    DisjointSet(int n){
        parent.resize(n+1,0);
        size.resize(n+1,1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
        }
    }
    
    int findUpar(int node){
        if(parent[node] == node) return node;
        return parent[node] = findUpar(parent[node]);
    }
    
    void unionBySize(int u,int v){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] >= size[ulp_v]){
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
        else{
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
    }
};

bool isvalid(int row,int col,int n,int m){
  return row >= 0 && row < n && col >= 0 && col < m;
}

vector<int> numOfIslandsII(int n, int m, vector<vector<int>> &q){
    vector<vector<int>> vis(n,vector<int> (m,0));
    DisjointSet ds(n*m);
    vector<int> ans;
    int cnt = 0;

    int dr[] = {-1,0,0,1};
    int dc[] = {0,-1,1,0};

    for(auto &it:q){
      int row = it[0];
      int col = it[1];
      if(vis[row][col]){
        ans.push_back(cnt);
        continue;
      }

      vis[row][col] = true;
      cnt++;

      for(int i=0;i<4;i++){
        int nrow = row + dr[i];
        int ncol = col + dc[i];
        if(isvalid(nrow,ncol,n,m) && vis[nrow][ncol] == true){
          int node = row * m + col;
          int adjnode = nrow * m + ncol;
          if(ds.findUpar(node) != ds.findUpar(adjnode)){
            ds.unionBySize(node, adjnode);
            cnt--;
          }
        }
      }

      ans.push_back(cnt);
    }
    return ans;
}
