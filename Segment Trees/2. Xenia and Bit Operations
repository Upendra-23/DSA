#include<bits/stdc++.h>
using namespace std;

class SGTree {
	vector<int> seg;
public:
	SGTree(int n) {
		seg.resize(4 * n + 1);
	}

	void build(int ind, int low, int high, int arr[], int orr) {
		if (low == high) {
			seg[ind] = arr[low];
			return;
		}
		int mid = (low + high) / 2;
		build(2 * ind + 1, low, mid, arr, !orr);
		build(2 * ind + 2, mid + 1, high, arr, !orr);
		if (orr) seg[ind] = seg[2 * ind + 1] | seg[2 * ind + 2];
		else seg[ind] = seg[2 * ind + 1] ^ seg[2 * ind + 2];
	}

	void update(int ind, int low, int high, int i, int val, int orr) {
		if (low == high) {
			seg[ind] = val;
			return;
		}
		int mid = (low + high) / 2;
		if (i <= mid) update(2 * ind + 1, low, mid, i, val, !orr);
		else update(2 * ind + 2, mid + 1, high, i, val, !orr);
		if (orr) seg[ind] = seg[2 * ind + 1] | seg[2 * ind + 2];
		else seg[ind] = seg[2 * ind + 1] ^ seg[2 * ind + 2];
	}

	int getroot() {
		return seg[0];
	}
};

int main() {
	int n, q;
	cin >> n >> q;
	int el = pow(2, n);
	int arr[el];
	for (int i = 0; i < el; i++)
		cin >> arr[i];

	bool orr = (n % 2 == 0) ? false : true;

	SGTree seg(el);
	seg.build(0, 0, el - 1, arr, orr);

	while (q--) {
		int i, val;
		cin >> i >> val;
		i--;
		seg.update(0, 0, el - 1, i, val, orr);
		cout << seg.getroot() << endl;
	}
}
