class Solution {

    bool isvalid(int nrow,int ncol,int n,int m){
        return nrow >= 0 && nrow < n && ncol >= 0 && ncol < m;
    }

    bool dfs(int ind,int row,int col,string &word,vector<vector<int>> &vis,vector<vector<char>> &board){
        if(ind == word.size()) return true;
        int dr[] = {-1,0,0,1};
        int dc[] = {0,-1,1,0};
        for(int i=0;i<4;i++){
            int nrow = row + dr[i];
            int ncol = col + dc[i];
            if(isvalid(nrow,ncol,board.size(),board[0].size()) && board[nrow][ncol] == word[ind] && !vis[nrow][ncol]){
                vis[nrow][ncol] = true;
                if(dfs(ind+1,nrow,ncol,word,vis,board))
                    return true;
                vis[nrow][ncol] = false;
            }
        }
        return false;
    }
public:
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>> vis(n,vector<int> (m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j] == word[0]){
                    vis[i][j] = true;
                    if(dfs(1,i,j,word,vis,board))
                        return true;
                    vis[i][j] = false;
                }
            }
        }
        return false;
    }
};
