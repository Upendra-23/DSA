class Solution {
    int fun(int ind,int target,vector<int> &nums,unordered_map<string,int> &mp){
        if(ind == 0){
            if(target + nums[0] == 0 && target - nums[0] == 0) return 2;
            if(target + nums[0] == 0 || target - nums[0] == 0) return 1;
            return 0;
        }
        string key = to_string(ind) + "_" + to_string(target);
        if(mp.find(key) != mp.end()) return mp[key];
        int plus = fun(ind-1,target+nums[ind],nums,mp);
        int minus = fun(ind-1,target-nums[ind],nums,mp);
        return mp[key] = plus + minus;
    }
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        unordered_map<string,int> mp;
        return fun(n-1, target, nums, mp);
    }
};
