int minSubsetSumDifference(vector<int>& arr, int n)
{
	int k = accumulate(arr.begin(),arr.end(),0);
	vector<vector<int>> dp(n, vector<int> (k+1,0));

	for(int i=0;i<n;i++) dp[i][0] = true;
	for(int j=0;j<=k;j++){
		if(arr[0] == j) dp[0][j] = true;
		else dp[0][j] = false;
	}

	for(int ind=1;ind<n;ind++){
		for(int target=1;target<=k;target++){
			bool notpick = dp[ind-1][target];
			bool pick = (arr[ind] <= target) ? dp[ind-1][target-arr[ind]] : false;
			dp[ind][target] = pick || notpick;
		}
	}
	
	int ans = k;
	for(int s1=0;s1<=k;s1++){
		if(dp[n-1][s1] == true){
			ans = min(ans, abs(s1 -(k-s1)));
		}
	}
	return ans;
}
