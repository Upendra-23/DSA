class Solution {
    int fun(int ind,int target,vector<int> &arr,vector<vector<int>> &dp){
        if(target == 0) return true;
        if(ind == 0) return arr[0] == target;
        if(dp[ind][target] != -1) return dp[ind][target];
        bool notpick = fun(ind-1,target,arr,dp);
        bool pick = false;
        if(arr[ind] <= target)
            pick = fun(ind-1,target-arr[ind],arr,dp);
        return dp[ind][target] = pick || notpick;
    }
  public:
    bool isSubsetSum(vector<int>& arr, int sum) {
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int> (sum+1,0));
        for(int i=0;i<n;i++) dp[i][0] = true;
        for(int j=1;j<=sum;j++) {
            if(arr[0] == j) dp[0][j] = true;
            else dp[0][j] = false;
        }
        
        for(int ind=1;ind<n;ind++){
            for(int target=1;target<=sum;target++){
                bool notpick = dp[ind-1][target];
                bool pick = false;
                if(arr[ind] <= target)
                    pick = dp[ind-1][target-arr[ind]];
                dp[ind][target] = pick || notpick;
            }
        }
        
        return dp[n-1][sum];
    }
};
