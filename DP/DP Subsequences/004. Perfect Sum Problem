class Solution {
    int mod = (int)(1e9+7);
    int fun(int ind,int target,vector<int> &arr,vector<vector<int>> &dp){
        if(ind == 0){
            if(target == 0 && arr[0] == 0) return 2;
            if(target == 0 || arr[0] == target) return 1;
            return 0;
        }
        if(dp[ind][target] != -1) return dp[ind][target];
        int notpick = fun(ind-1,target,arr,dp);
        int pick = 0;
        if(arr[ind] <= target)
            pick = fun(ind-1,target-arr[ind],arr,dp);
        return dp[ind][target] = pick + notpick;
    }
  public:
    int perfectSum(vector<int>& arr, int k) {
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int> (k+1, 0));
       
        for(int j=0;j<=k;j++){
            if(j == 0 && arr[0] == 0) dp[0][j] = 2;
            else if(j == 0 || arr[0] == j) dp[0][j] = 1;
            else dp[0][j] = 0;
        }
        
        for(int ind=1;ind<n;ind++){
            for(int target=0;target<=k;target++){
                int notpick = dp[ind-1][target];
                int pick = (arr[ind] <= target) ? dp[ind-1][target-arr[ind]] : 0;
                dp[ind][target] = (pick + notpick)%mod;
            }
        }
        
        return dp[n-1][k];
    }
};
