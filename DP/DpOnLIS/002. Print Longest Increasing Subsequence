class Solution {
  public:
    vector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {
        vector<int> dp(n,1), parent(n,0);
        for(int i=0;i<n;i++) parent[i] = i;
        
        int maxInd = -1, maxLen = 0;
        for(int curr=0;curr<n;curr++){
            for(int prev=0;prev<curr;prev++){
                if(arr[curr] > arr[prev] && 1+dp[prev] > dp[curr]){
                    dp[curr] = 1+dp[prev];
                    parent[curr] = prev;
                }
            }
            if(maxLen < dp[curr]){
                maxLen = dp[curr];
                maxInd = curr;
            }
        }
        
        int ind = maxInd;
        vector<int> ans;
        ans.push_back(arr[ind]);
        while(ind != parent[ind]){
            ans.push_back(arr[parent[ind]]);
            ind = parent[ind];
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
