class Solution {
    int fun(int ind,int buy,int k,vector<int> &prices,vector<vector<vector<int>>> &dp){
        if(ind == prices.size() || k == 0) return 0;
        if(dp[ind][buy][k] != -1) return dp[ind][buy][k];
        if(buy) return dp[ind][buy][k] = max(-prices[ind]+fun(ind+1,0,k,prices,dp),fun(ind+1,1,k,prices,dp));
        return dp[ind][buy][k] = max(prices[ind]+fun(ind+1,1,k-1,prices,dp),fun(ind+1,0,k,prices,dp));
    }
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>> (2, vector<int> (3, 0)));
        for(int ind=n-1;ind>=0;ind--){
            for(int buy=1;buy>=0;buy--){
                for(int k=2;k>=1;k--){
                    if(buy) dp[ind][buy][k] = max(-prices[ind]+dp[ind+1][0][k], dp[ind+1][1][k]);
                    else dp[ind][buy][k] = max(prices[ind]+dp[ind+1][1][k-1], dp[ind+1][0][k]);
                }
            }
        }
        return dp[0][1][2];
    }
};
