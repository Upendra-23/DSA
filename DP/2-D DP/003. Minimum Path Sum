class Solution {
    int fun(int i,int j,vector<vector<int>> &grid, vector<vector<int>> &dp){
        if(i < 0 || j < 0) return 1e9;
        if(i == 0 && j == 0) return grid[i][j];
        if(dp[i][j] != -1) return dp[i][j];
        int u = grid[i][j] + fun(i-1,j,grid,dp);
        int l = grid[i][j] + fun(i,j-1,grid,dp);
        return dp[i][j] = min(u,l);
    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<int>> dp(n+1, vector<int> (m+1,1e9));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(i == 1 && j == 1){
                    dp[i][j] = grid[0][0];
                    continue;
                }
                int u = grid[i-1][j-1] + dp[i-1][j];
                int l = grid[i-1][j-1] + dp[i][j-1];
                dp[i][j] = min(u,l); 
            }
        }
        return dp[n][m];
    }
};
