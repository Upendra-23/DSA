class Solution {
    int fun(int i,int j,vector<vector<int>> &matrix,vector<vector<int>> &dp){
        if(j < 0 || j == matrix[0].size()) return 1e9;
        if(i == 0) return matrix[i][j];
        if(dp[i][j] != INT_MIN) return dp[i][j];
        int u = matrix[i][j] + fun(i-1,j,matrix,dp);
        int ul = matrix[i][j] + fun(i-1,j-1,matrix,dp);
        int ur = matrix[i][j] + fun(i-1,j+1,matrix,dp);
        return dp[i][j] = min({u,ul,ur});
    }
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        vector<vector<int>> dp(n, vector<int> (m,0));
        for(int j=0;j<m;j++) dp[0][j] = matrix[0][j];

        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                int u = matrix[i][j], ul = 1e9, ur = 1e9;
                u += dp[i-1][j];
                if(j-1 >= 0) ul = matrix[i][j] + dp[i-1][j-1];
                if(j+1 < m) ur = matrix[i][j] + dp[i-1][j+1];
                dp[i][j] = min({u,ul,ur});
            }
        }
        
        int ans = 1e9;
        for(int j=0;j<m;j++){
            ans = min(ans, dp[n-1][j]);
        }
        return ans;

        return ans;

    }
};
