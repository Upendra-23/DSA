class Solution {
    int fun(int i,int j,vector<vector<int>> &obstacleGrid,vector<vector<int>> &dp){
        if(i < 0 || j < 0 || obstacleGrid[i][j] == 1) return 0;
        if(i == 0 && j == 0) return 1;
        if(dp[i][j] != -1) return dp[i][j];
        int u = fun(i-1,j,obstacleGrid,dp);
        int l = fun(i,j-1,obstacleGrid,dp);
        return dp[i][j] = u + l;
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();
        if(obstacleGrid[0][0] == 1 || obstacleGrid[n-1][m-1] == 1) return 0;

        vector<vector<int>> dp(n+1, vector<int> (m+1,0));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(i == 1 && j == 1){
                    dp[i][j] = 1;
                    continue;
                }
                if(obstacleGrid[i-1][j-1] == 1){
                    dp[i][j] = 0;
                    continue;
                }
                int u = dp[i-1][j];
                int l = dp[i][j-1];
                dp[i][j] = u+l;
            }
        }
        return dp[n][m];
    }
};
