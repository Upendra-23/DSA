class Solution {
    void updateBitPos(int num, vector<int> &bitPos, int val){
        for(int i=0;i<32;i++){
            if((num >> i) & 1)
                bitPos[i] += val;
        }
    }
    int getBinaryToDecimal(vector<int> &bitPos){
        int num = 0;
        for(int i=0;i<32;i++){
            if(bitPos[i] > 0){
                num |= (1 << i);
            }
        }
        return num;
    }
public:
    int minimumSubarrayLength(vector<int>& nums, int k) {
        vector<int> bitPos(32, 0);
        int ans = INT_MAX;
        int i = 0, j = 0;
        while(j < nums.size()){
            updateBitPos(nums[j], bitPos, 1);
            while(getBinaryToDecimal(bitPos) >= k && i <= j){
                ans = min(ans, j-i+1);
                updateBitPos(nums[i], bitPos, -1);
                i++;
            }
            j++;
        }
        return ans == INT_MAX ? -1 : ans;
    }
};
