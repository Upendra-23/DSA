class Solution {
    bool static comp(const vector<int> &a, const vector<int> &b){
        return a[1] < b[1];
    }
public:
    vector<int> countServers(int n, vector<vector<int>>& logs, int x, vector<int>& queries) {
        vector<pair<int,int>> sortedQueries;
        for(int i=0;i<queries.size();i++)
            sortedQueries.push_back({queries[i], i});

        sort(sortedQueries.begin(), sortedQueries.end());
        sort(logs.begin(), logs.end(), comp);

        unordered_map<int,int> mp;
        int i = 0, j = 0;
        vector<int> ans(sortedQueries.size(), 0);
        for(auto q: sortedQueries){
            int ind = q.second;
            int endtime = q.first;
            int startTime = endtime - x;

            while(j < logs.size() && logs[j][1] <= endtime){
                mp[logs[j][0]]++;
                j++;
            }

            while(i < logs.size() && logs[i][1] < startTime){
                mp[logs[i][0]]--;
                if(mp[logs[i][0]] == 0)
                    mp.erase(logs[i][0]);
                i++;
            }
            ans[ind] = n - mp.size();
        }
        return ans;
    }
};
