class Solution {
    void pushEl(int el, multiset<double> &msleft, multiset<double> &msright) {
        
        if(msleft.size() == 0) msleft.insert(el);
        else if(el > *msleft.rbegin()) msright.insert(el);
        else msleft.insert(el);

        int lsize = msleft.size(), rsize = msright.size();
        if(rsize > lsize){
            auto rval = msright.begin();
            msleft.insert(*rval);
            msright.erase(rval);
        }

        if(lsize - rsize == 2){
            auto lval = msleft.rbegin();
            msright.insert(*lval);
            auto frontite = msleft.find(*lval);
            msleft.erase(frontite);
        }
    }
    void removeEl(int el, multiset<double> &msleft, multiset<double> &msright) {
        int lsize = msleft.size();
        int rsize = msright.size();

        if(el > (*msleft.rbegin())){
            auto itel = msright.find(el);
            msright.erase(itel);
            rsize--;
            if(lsize - rsize == 2){
                auto lval = msleft.rbegin();
                msright.insert(*lval);
                auto frontite = msleft.find(*lval);
                msleft.erase(frontite);
            }
        }
        else{
            auto itel = msleft.find(el);
            msleft.erase(itel);
            lsize--;
            if(rsize > lsize){
                auto rval = msright.begin();
                msleft.insert(*rval);
                msright.erase(rval);
            }
        }

    }
public:
    vector<double> medianSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<double> ans;
        multiset<double> msleft, msright;
        int i = 0, j = 0;
        while(j < n){
            pushEl(nums[j], msleft, msright);
            if(j-i+1 < k) j++;
            else{
                double a = *msleft.rbegin();
                double b;
                if(msright.size() > 0)
                    b = *msright.begin();
                
                if(k & 1) ans.push_back(a*1.0);
                else{
                    ans.push_back((a+b)/2.0);
                }

                removeEl(nums[i], msleft, msright);
                i++;
                j++;
            }
        }
        return ans;
    }
};
